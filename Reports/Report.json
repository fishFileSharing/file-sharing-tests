{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 1,
    "pending": 0,
    "failures": 2,
    "start": "2024-12-30T22:16:02.258Z",
    "end": "2024-12-30T22:16:30.269Z",
    "duration": 28011,
    "testsRegistered": 3,
    "passPercent": 33.33333333333333,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cbc12fea-7ea2-4387-80d8-316276fcbef6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "230f165e-f309-400d-ae47-05cbb7071c08",
          "title": "Select a file and check if it's name appears on page",
          "fullFile": "C:\\Users\\pro32\\Documents\\Проект\\Тестовые данные\\file-sharing-tests\\test\\1_select_a_pdf.js",
          "file": "\\test\\1_select_a_pdf.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Select a file and check if it's name appears on page\"",
              "fullTitle": "Select a file and check if it's name appears on page \"before each\" hook in \"Select a file and check if it's name appears on page\"",
              "timedOut": false,
              "duration": 883,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Хук `beforeEach` запускается перед каждым тестом внутри тестового набора.\ndriver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\n// Создаем экземпляр WebDriver для браузера Microsoft Edge.",
              "err": {},
              "uuid": "24bcdc6f-d5f6-4574-90b5-1d2f852e34bf",
              "parentUUID": "230f165e-f309-400d-ae47-05cbb7071c08",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Select a file and check if it's name appears on page\"",
              "fullTitle": "Select a file and check if it's name appears on page \"after each\" hook in \"Select a file and check if it's name appears on page\"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Хук `afterEach` запускается после каждого теста внутри тестового набора.\nif (driver) {\n  await driver.quit();\n  // Завершаем работу WebDriver, чтобы закрыть браузер и освободить ресурсы.\n}",
              "err": {},
              "uuid": "550663c8-b8dc-4f1b-867c-79b8910d29b5",
              "parentUUID": "230f165e-f309-400d-ae47-05cbb7071c08",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should open https://file-sharing-dev.netlify.app/ and check for title",
              "fullTitle": "Select a file and check if it's name appears on page should open https://file-sharing-dev.netlify.app/ and check for title",
              "timedOut": false,
              "duration": 8256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Описываем отдельный тест с названием: \"Открыть сайт и проверить заголовок\".\nthis.timeout(10000);\n// Устанавливаем тайм-аут для теста в 10 секунд.\nawait driver.get(\"https://file-sharing-dev.netlify.app/\");\n// Загружаем указанную веб-страницу в браузере.\nawait driver.sleep(3000);\n// Ждем 3 секунды, чтобы страница успела полностью загрузиться.\nlet selectFilesInput = await driver.wait(\n  until.elementLocated(By.css('[data-testid=\"select-files-input\"]')),\n  5000\n);\n// Ожидаем, пока на странице появится элемент с CSS-селектором `data-testid=\"select-files-input\"`.\n// Максимальное время ожидания — 5 секунд.\nconst filePath = path.join(__dirname, \"..\", \"test_files\", \"1.pdf\");\n// Создаем абсолютный путь к файлу `1.pdf`, который находится в папке `test_files`.\nselectFilesInput.sendKeys(filePath);\n// Отправляем путь к файлу в поле ввода, чтобы загрузить файл на сайт.\nawait driver.sleep(3000);\n// Ждем 3 секунды, чтобы система успела обработать загрузку файла.\nlet selectedFileName = await driver.wait(\n  until.elementLocated(By.css('[data-testid=\"selected-file-name\"]')),\n  5000\n);\n// Ожидаем, пока на странице появится элемент с CSS-селектором `data-testid=\"selected-file-name\"`.\n// Этот элемент отображает имя загруженного файла.\nlet selectedFileNameText = await selectedFileName.getText();\n// Считываем текст из элемента, который отображает имя файла.\nassert(\n  selectedFileNameText.includes(\"1.pdf\", \"Something is wrong with filename\")\n);\n// Проверяем, содержит ли текст имя файла \"1.pdf\". Если нет, выбрасывается ошибка с сообщением.",
              "err": {},
              "uuid": "7cce6ea4-3061-4a58-b00a-a8ff84da904f",
              "parentUUID": "230f165e-f309-400d-ae47-05cbb7071c08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7cce6ea4-3061-4a58-b00a-a8ff84da904f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8256,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "97744b89-b978-400a-b820-436630123fe7",
          "title": "Select a file and check if it's name appears on page",
          "fullFile": "C:\\Users\\pro32\\Documents\\Проект\\Тестовые данные\\file-sharing-tests\\test\\2_select_a_jpeg.js",
          "file": "\\test\\2_select_a_jpeg.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Select a file and check if it's name appears on page\"",
              "fullTitle": "Select a file and check if it's name appears on page \"before each\" hook in \"Select a file and check if it's name appears on page\"",
              "timedOut": false,
              "duration": 884,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Хук `beforeEach` запускается перед каждым тестом внутри тестового набора.\ndriver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\n// Создаем экземпляр WebDriver для браузера Microsoft Edge.",
              "err": {},
              "uuid": "9825a679-cdcf-4a6e-a61d-d514209f26fb",
              "parentUUID": "97744b89-b978-400a-b820-436630123fe7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Select a file and check if it's name appears on page\"",
              "fullTitle": "Select a file and check if it's name appears on page \"after each\" hook in \"Select a file and check if it's name appears on page\"",
              "timedOut": false,
              "duration": 98,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Хук `afterEach` запускается после каждого теста внутри тестового набора.\nif (driver) {\n  await driver.quit();\n  // Завершаем работу WebDriver, чтобы закрыть браузер и освободить ресурсы.\n}",
              "err": {},
              "uuid": "5f5bf0f0-59a0-45da-ab4c-46696fb306f9",
              "parentUUID": "97744b89-b978-400a-b820-436630123fe7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should open https://file-sharing-dev.netlify.app/ and check for title",
              "fullTitle": "Select a file and check if it's name appears on page should open https://file-sharing-dev.netlify.app/ and check for title",
              "timedOut": false,
              "duration": 7010,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Описываем отдельный тест с названием: \"Открыть сайт и проверить заголовок\".\nthis.timeout(10000);\n// Устанавливаем тайм-аут для теста в 10 секунд.\nawait driver.get(\"https://file-sharing-dev.netlify.app/\");\n// Загружаем указанную веб-страницу в браузере.\nawait driver.sleep(3000);\n// Ждем 3 секунды, чтобы страница успела полностью загрузиться.\nlet selectFilesInput = await driver.wait(\n  until.elementLocated(By.css('[data-testid=\"select-files-input\"]')),\n  5000\n);\n// Ожидаем, пока на странице появится элемент с CSS-селектором `data-testid=\"select-files-input\"`.\n// Максимальное время ожидания — 5 секунд.\nconst filePath = path.join(__dirname, \"..\", \"test_files\", \"Full.jpeg\");\n// Создаем абсолютный путь к файлу `1.pdf`, который находится в папке `test_files`.\nselectFilesInput.sendKeys(filePath);\n// Отправляем путь к файлу в поле ввода, чтобы загрузить файл на сайт.\nawait driver.sleep(3000);\n// Ждем 3 секунды, чтобы система успела обработать загрузку файла.\nlet selectedFileName = await driver.wait(\n  until.elementLocated(By.css('[data-testid=\"selected-file-name\"]')),\n  5000\n);\n// Ожидаем, пока на странице появится элемент с CSS-селектором `data-testid=\"selected-file-name\"`.\n// Этот элемент отображает имя загруженного файла.\nlet selectedFileNameText = await selectedFileName.getText();\n// Считываем текст из элемента, который отображает имя файла.\nassert(\n  selectedFileNameText.includes(\"1.pdf\", \"Something is wrong with filename\")\n);\n// Проверяем, содержит ли текст имя файла \"1.pdf\". Если нет, выбрасывается ошибка с сообщением.",
              "err": {
                "message": "AssertionError: The expression evaluated to a falsy value:\n\n  assert(\n    selectedFileNameText.includes(\"1.pdf\", \"Something is wrong with filename\")\n  )\n",
                "estack": "AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  assert(\n    selectedFileNameText.includes(\"1.pdf\", \"Something is wrong with filename\")\n  )\n\n    at Context.<anonymous> (test\\2_select_a_jpeg.js:71:5)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "e132a37a-d1cb-46b8-a4c1-7c89b3167c4b",
              "parentUUID": "97744b89-b978-400a-b820-436630123fe7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e132a37a-d1cb-46b8-a4c1-7c89b3167c4b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7010,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e28b62e-d738-40f3-a6d9-3e87f1428bd7",
          "title": "Select files and check if their names appear on page",
          "fullFile": "C:\\Users\\pro32\\Documents\\Проект\\Тестовые данные\\file-sharing-tests\\test\\3_select_a_pdf+jpeg.js",
          "file": "\\test\\3_select_a_pdf+jpeg.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Select files and check if their names appear on page\"",
              "fullTitle": "Select files and check if their names appear on page \"before each\" hook in \"Select files and check if their names appear on page\"",
              "timedOut": false,
              "duration": 862,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\n// Создаем экземпляр WebDriver для браузера Microsoft Edge.",
              "err": {},
              "uuid": "d9bfe186-848b-447c-9240-660aa85f3c1d",
              "parentUUID": "8e28b62e-d738-40f3-a6d9-3e87f1428bd7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Select files and check if their names appear on page\"",
              "fullTitle": "Select files and check if their names appear on page \"after each\" hook in \"Select files and check if their names appear on page\"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n  // Завершаем работу WebDriver.\n}",
              "err": {},
              "uuid": "041a4ea5-7d4d-4115-ac37-257e6be8f808",
              "parentUUID": "8e28b62e-d738-40f3-a6d9-3e87f1428bd7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should upload two files and verify their names appear",
              "fullTitle": "Select files and check if their names appear on page should upload two files and verify their names appear",
              "timedOut": false,
              "duration": 9874,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000); // Увеличиваем тайм-аут для теста до 20 секунд.\nawait driver.get(\"https://file-sharing-dev.netlify.app/\");\n// Загружаем веб-страницу.\nawait driver.sleep(3000); // Ждем, чтобы страница успела загрузиться.\nconst selectFilesInput = await driver.wait(\n  until.elementLocated(By.css('[data-testid=\"select-files-input\"]')),\n  5000\n);\n// Находим поле для загрузки файлов.\nconst files = [\n  path.join(__dirname, \"..\", \"test_files\", \"1.pdf\"),\n  path.join(__dirname, \"..\", \"test_files\", \"Full.jpeg\"),\n];\n// Задаем пути к файлам для загрузки.\nfor (const filePath of files) {\n  console.log(`Uploading file: ${filePath}`);\n  selectFilesInput.sendKeys(filePath); // Загружаем файл.\n  await driver.sleep(3000); // Ждем обработки загрузки файла.\n  const selectedFileName = await driver.wait(\n    until.elementLocated(By.css('[data-testid=\"selected-file-name\"]')),\n    5000\n  );\n  // Ожидаем появления имени загруженного файла.\n  const selectedFileNameText = await selectedFileName.getText();\n  console.log(`Displayed file name: ${selectedFileNameText}`);\n  const expectedFileName = path.basename(filePath); // Извлекаем только имя файла.\n  assert(\n    selectedFileNameText.includes(expectedFileName),\n    `Expected file name to include \"${expectedFileName}\", but got \"${selectedFileNameText}\"`\n  );\n  // Проверяем, содержит ли текст имя файла.\n}",
              "err": {
                "message": "AssertionError: Expected file name to include \"Full.jpeg\", but got \"1.pdf\"",
                "estack": "AssertionError [ERR_ASSERTION]: Expected file name to include \"Full.jpeg\", but got \"1.pdf\"\n    at Context.<anonymous> (test\\3_select_a_pdf+jpeg.js:60:7)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "13210936-a0ad-4839-ac05-18a51e3afdfd",
              "parentUUID": "8e28b62e-d738-40f3-a6d9-3e87f1428bd7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "13210936-a0ad-4839-ac05-18a51e3afdfd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9874,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Reports",
        "reportFilename": "Report"
      },
      "version": "6.2.0"
    }
  }
}